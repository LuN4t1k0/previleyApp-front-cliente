import { useFormik } from "formik";
import * as Yup from "yup";
import { useEffect, useState } from "react";
import { Button, Select, SelectItem, ProgressBar } from "@tremor/react";
import { Input } from "@/components/ui/input/Input";
import useUserData from "@/hooks/useUserData";
import { showErrorAlert, showConfirmationAlert, showSuccessAlert } from "@/utils/alerts";
import apiService from "@/app/api/apiService";
import isEqual from "lodash/isEqual";

// Esquema de validación (puedes ajustarlo según lo que requieras)
const validationSchema = Yup.object().shape({
  empresaRut: Yup.string().required("El RUT de la empresa es obligatorio"),
  servicioId: Yup.string().required("El servicio es obligatorio"),
  entidadId: Yup.string().required("La entidad es obligatoria"),
  fechaProduccion: Yup.date().required("La fecha de producción es obligatoria"),
  montoRegularizado: Yup.number().required("El monto regularizado es obligatorio").min(1, "El monto debe ser mayor a 0"),
  // Validación de archivos si es necesario
});

const ProduccionFormContent = ({ initialData, onClose, handleSubmit }) => {
  const { id: trabajadorId } = useUserData();
  const [empresaOptions, setEmpresaOptions] = useState([]);
  const [servicioOptions, setServicioOptions] = useState([]);
  const [entidadOptions, setEntidadOptions] = useState([]);
  const [originalData, setOriginalData] = useState(initialData || {});
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);

  // Cargar opciones de selects
  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const empresasRes = await apiService.get("/empresas/");
        setEmpresaOptions(empresasRes.data.data.map(e => ({ value: e.empresaRut, label: e.nombre })));
        const serviciosRes = await apiService.get("/servicios");
        setServicioOptions(serviciosRes.data.data.map(s => ({ value: s.id.toString(), label: s.nombre })));
        const entidadesRes = await apiService.get("/entidades");
        setEntidadOptions(entidadesRes.data.data.map(e => ({ value: e.id.toString(), label: e.nombre })));
      } catch (error) {
        showErrorAlert("Error al obtener datos", error.message);
      }
    };
    fetchOptions();
  }, []);

  useEffect(() => {
    setOriginalData(initialData || {});
  }, [initialData]);

  const formik = useFormik({
    initialValues: {
      empresaRut: initialData?.empresaRut || "",
      trabajadorId, // Se asigna desde el helper
      servicioId: initialData?.servicioId ? initialData.servicioId.toString() : "",
      entidadId: initialData?.entidadId ? initialData.entidadId.toString() : "",
      fechaProduccion: initialData?.fechaProduccion ? initialData.fechaProduccion.split("T")[0] : "",
      montoRegularizado: initialData?.montoRegularizado || "",
      // Para archivos, se dejan en null
      certificadoInicial: null,
      certificadoFinal: null,
      detalle: null,
    },
    validationSchema,
    enableReinitialize: true,
    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        // Crear el FormData siguiendo la lógica de la versión mínima
        const formData = new FormData();
        formData.append("empresaRut", values.empresaRut);
        formData.append("trabajadorId", values.trabajadorId);
        formData.append("fechaProduccion", values.fechaProduccion);
        formData.append("servicioId", Number(values.servicioId));
        formData.append("entidadId", values.entidadId ? Number(values.entidadId) : "");
        formData.append("montoRegularizado", Number(values.montoRegularizado));

        if (values.certificadoInicial) {
          formData.append("initialCert", values.certificadoInicial);
        }
        if (values.certificadoFinal) {
          formData.append("finalCert", values.certificadoFinal);
        }
        if (values.detalle) {
          formData.append("detalle", values.detalle);
        }

        // Envía y cierra la modal
        await handleSubmit(formData, initialData);
        onClose();
      } catch (error) {
        console.error("Error al enviar producción:", error);
      } finally {
        setIsLoading(false);
      }
    },
  });

  // Cálculo de progreso (opcional)
  useEffect(() => {
    const requiredFields = ["empresaRut", "servicioId", "entidadId", "fechaProduccion", "montoRegularizado"];
    const filled = requiredFields.filter(key => {
      let value = formik.values[key] || (initialData && initialData[key]);
      return typeof value === "string" ? value.trim() !== "" : value !== null && value !== undefined;
    });
    setProgress(Math.round((filled.length / requiredFields.length) * 100));
  }, [formik.values, initialData]);

  const handleClose = async () => {
    if (!isEqual(formik.values, originalData)) {
      const confirm = await showConfirmationAlert("Cambios sin guardar", "Tienes cambios sin guardar. ¿Salir sin guardar?");
      if (confirm) onClose();
    } else {
      onClose();
    }
  };

  return (
    <form onSubmit={formik.handleSubmit}>
      <div className="mb-4 flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-800">{initialData ? "Editar Producción" : "Crear Producción"}</h2>
        <span className="text-sm font-medium text-gray-600">{progress}% Completado</span>
      </div>
      <ProgressBar value={progress} color="blue" />
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Empresa <span className="text-red-500">*</span></label>
          <Select value={formik.values.empresaRut} onValueChange={value => formik.setFieldValue("empresaRut", value)}>
            <SelectItem value="">Seleccione Empresa</SelectItem>
            {empresaOptions.map(option => (<SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>))}
          </Select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Servicio <span className="text-red-500">*</span></label>
          <Select value={formik.values.servicioId} onValueChange={value => formik.setFieldValue("servicioId", value)}>
            <SelectItem value="">Seleccione Servicio</SelectItem>
            {servicioOptions.map(option => (<SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>))}
          </Select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Entidad <span className="text-red-500">*</span></label>
          <Select value={formik.values.entidadId} onValueChange={value => formik.setFieldValue("entidadId", value)}>
            <SelectItem value="">Seleccione Entidad</SelectItem>
            {entidadOptions.map(option => (<SelectItem key={option.value} value={option.value}>{option.label}</SelectItem>))}
          </Select>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Fecha de Producción <span className="text-red-500">*</span></label>
          <Input type="date" value={formik.values.fechaProduccion} onChange={e => formik.setFieldValue("fechaProduccion", e.target.value)} />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Monto Regularizado <span className="text-red-500">*</span></label>
          <Input type="number" min="1" value={formik.values.montoRegularizado} onChange={e => formik.setFieldValue("montoRegularizado", e.target.value)} />
        </div>
      </div>
      
      {/* Sección para archivos (mantén la misma lógica que en tu versión actual) */}
      {formik.values.servicioId && (
        <div className="mt-4">
          {/** Aquí se pueden replicar los bloques para certificadoInicial, certificadoFinal y detalle **/}
          {/* Ejemplo para certificadoInicial */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Certificado Inicial <span className="text-red-500">*</span>
            </label>
            {initialData?.certificadoInicial ? (
              <div className="text-sm text-gray-600 mb-1">
                Archivo actual: <a href={initialData.certificadoInicial} target="_blank" rel="noopener noreferrer" className="underline text-blue-600">Ver archivo</a>
              </div>
            ) : (
              <div className="text-sm text-gray-600 mb-1">No se ha cargado un archivo</div>
            )}
            <Input type="file" accept=".pdf" onChange={(e) => formik.setFieldValue("certificadoInicial", e.target.files[0])} />
          </div>
          {/* Repite para certificadoFinal y detalle */}
        </div>
      )}

      <div className="mt-6 flex justify-end space-x-4">
        <Button onClick={handleClose} variant="secondary">Cancelar</Button>
        <Button type="submit" variant="primary" disabled={isLoading}>
          {isLoading ? "Cargando..." : initialData ? "Actualizar Producción" : "Crear Producción"}
        </Button>
      </div>
    </form>
  );
};

export default ProduccionFormContent;
